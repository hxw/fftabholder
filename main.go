// Copyright (c) 2015-2018, Christopher Hall
// see: LICENSE
package main

import (
	"fmt"
	"html/template"
	"log"
	"net/http"
	"regexp"
	"strings"
	"time"
)

func main() {

	server := &http.Server{
		Addr:           "127.0.0.1:8016",
		Handler:        pageHandler(),
		ReadTimeout:    10 * time.Second,
		WriteTimeout:   10 * time.Second,
		MaxHeaderBytes: 1 << 20,
	}
	log.Fatal(server.ListenAndServe())
}

type aHandler struct{}

func pageHandler() http.Handler {

	return &aHandler{}
}

const htmlPage = `<!DOCTYPE html>
<html>
<head><meta charset="UTF-8">
<title>{{ .Title }}</title>
<link rel="shortcut icon" href="/icon/{{ .Icon }}.png" />
<script type="text/javascript">
function new_tab(url) {
    window.open(url, '_blank');
    return false;
}
function do_link() {
    var url = document.getElementById('the-url').value;
    if ('' === url) {
        return false;
    }
    if ('.' == url[0]) {
        new_tab(url.substring(1));
    } else if (/^https?:/.test(url)) {
        new_tab(url);
    } else {
        new_tab('http://' + url);
    }
    return false;
}
</script>
</head>
<body>
  <h1>{{ .Title }}</h1>
  <form onsubmit="return do_link();">
    <input name="url" id="the-url" size="60">
    <br />
    <br />
    <a href="/New%20Tab" onclick="return do_link();" target="_blank">New Tab</a>
  </form>
</body>
</html>
`

type data struct {
	Title string
	Icon  string
}

var tp = template.Must(template.New("page").Parse(htmlPage))

var iconTick = []byte{
	0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x08, 0x02, 0x00, 0x00, 0x00, 0x25, 0x0b, 0xe6,
	0x89, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0b, 0x13, 0x00, 0x00, 0x0b,
	0x13, 0x01, 0x00, 0x9a, 0x9c, 0x18, 0x00, 0x00, 0x00, 0x07, 0x74, 0x49, 0x4d, 0x45, 0x07, 0xdd,
	0x0b, 0x0e, 0x03, 0x13, 0x35, 0xc0, 0x61, 0xd8, 0x9b, 0x00, 0x00, 0x00, 0x19, 0x69, 0x54, 0x58,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x68, 0x73, 0x77, 0x06, 0xf7, 0x12, 0x04, 0x00, 0x00,
	0x01, 0x2f, 0x49, 0x44, 0x41, 0x54, 0x68, 0xde, 0xed, 0x9a, 0x3b, 0x12, 0xc2, 0x30, 0x0c, 0x44,
	0x6d, 0xc3, 0x19, 0x38, 0x0c, 0x1d, 0x27, 0xa7, 0xe3, 0x28, 0x14, 0xd4, 0x1c, 0x80, 0x8e, 0x99,
	0xfc, 0xfc, 0x95, 0x56, 0xd6, 0x64, 0x5d, 0xa6, 0x88, 0xf7, 0xad, 0xd6, 0x8a, 0x93, 0x38, 0xbe,
	0xbf, 0x97, 0xe0, 0x79, 0xa4, 0xe0, 0x7c, 0x10, 0x80, 0x00, 0x04, 0x70, 0x3e, 0xae, 0x73, 0xca,
	0x7a, 0xdc, 0x3f, 0xab, 0x2b, 0xcf, 0xd7, 0xcd, 0x4d, 0x05, 0xb6, 0xea, 0x8f, 0x2e, 0x72, 0x0d,
	0xa0, 0xec, 0x77, 0x03, 0xd0, 0xaa, 0x9e, 0x11, 0x02, 0xda, 0xef, 0xa9, 0x0b, 0xb9, 0xac, 0x40,
	0x9f, 0xfd, 0x3e, 0x2a, 0x90, 0x51, 0xcf, 0x08, 0xe9, 0xe7, 0x27, 0x6f, 0x3f, 0x2b, 0x60, 0x6d,
	0x3f, 0x2b, 0x60, 0xb1, 0x77, 0x70, 0x53, 0x81, 0x9a, 0xfc, 0x30, 0x42, 0xa6, 0xcb, 0x97, 0x15,
	0x98, 0xc0, 0x7e, 0x33, 0x80, 0xf1, 0xe6, 0xc3, 0x08, 0x59, 0xec, 0x9c, 0xa7, 0x00, 0x90, 0x55,
	0xcf, 0x08, 0x59, 0xdb, 0x0f, 0x05, 0x10, 0xec, 0x3c, 0x06, 0x00, 0x45, 0xf5, 0x7d, 0xf6, 0x87,
	0xd5, 0xc7, 0xdd, 0xdd, 0x69, 0xba, 0x6f, 0x0d, 0x50, 0x1f, 0x42, 0x88, 0xff, 0x9f, 0x7c, 0x52,
	0x8f, 0xc6, 0xd6, 0xd8, 0x0c, 0x1a, 0x94, 0xdc, 0x85, 0x3e, 0x17, 0xa1, 0xbc, 0x94, 0x7a, 0xab,
	0xea, 0xa5, 0x8f, 0xe7, 0x33, 0x89, 0x3b, 0x8a, 0x54, 0x2f, 0x1f, 0x21, 0xb0, 0xfa, 0x05, 0x40,
	0xcd, 0x1d, 0xa5, 0x62, 0x2d, 0xa5, 0x7e, 0xd1, 0x85, 0x06, 0xbb, 0x5e, 0x25, 0x9b, 0xa0, 0xf4,
	0xc3, 0x08, 0x15, 0xe7, 0xd8, 0x6a, 0xb5, 0x52, 0xbf, 0x5f, 0x81, 0xa6, 0x16, 0x8e, 0x0f, 0x7d,
	0x4f, 0x1b, 0x1d, 0x5c, 0x12, 0x4a, 0xd2, 0x0b, 0x5d, 0x48, 0x75, 0x56, 0xd0, 0x66, 0x4e, 0x84,
	0x41, 0xdb, 0x88, 0x58, 0x3c, 0xf0, 0xd4, 0xdd, 0x3a, 0x31, 0x35, 0x4c, 0x4a, 0x3a, 0x60, 0x09,
	0x8c, 0x95, 0x47, 0xce, 0xcc, 0xbb, 0xcd, 0x28, 0x00, 0x60, 0x67, 0x8f, 0x00, 0x50, 0x7d, 0xef,
	0xc1, 0x01, 0x9c, 0xf7, 0xab, 0x04, 0x01, 0x08, 0x40, 0x00, 0x02, 0x10, 0x80, 0x00, 0xd2, 0xe3,
	0x07, 0xe8, 0x34, 0x87, 0xaa, 0x0c, 0x1f, 0xec, 0x90, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e,
	0x44, 0xae, 0x42, 0x60, 0x82,
}

var iconRegexp = regexp.MustCompilePOSIX("^/icon/(.+)[.]png$")

func (f aHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {

	//fmt.Printf("req: %v\n", r)
	//fmt.Printf("req: %q\n", r.URL.Path)

	if "/favicon.png" == r.URL.Path || "/favicon.ico" == r.URL.Path {
		r.Header.Add("Content-Type", "image/png")
		w.Write(iconTick)
		return
	} else if strings.HasPrefix(r.URL.Path, "/icon/") {
		r.Header.Add("Content-Type", "image/png")
		m := iconRegexp.FindStringSubmatch(r.URL.Path)
		if len(m) > 1 {
			if icon, ok := icons[m[1]]; ok {
				w.Write(icon)
				return
			}
		}
		w.Write(iconTick)
		return
	}

	str := r.URL.Path[1:] // strip leading '/'

	d := data{
		Title: str,
		Icon:  strings.ToLower(str[0:1]),
	}
	err := tp.Execute(w, d)
	if nil != err {
		fmt.Printf("error: %s\n", err)
	}
}
